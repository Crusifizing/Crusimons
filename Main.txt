import re
import requests
import time
import random
import configparser
import os
import sys
from threading import Thread
from datetime import datetime
os.system('color 4')

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


try:
    config = configparser.RawConfigParser()
    config.sections()
    config.read('Config.ini')
    config.sections()
    Vars = config['Variables']


    #------------------------------Variables-------------------------------#
    PlayerId = int(Vars['playerid'])
    SafeMode = str(Vars['safemode'])
    SafetyNumber = int(Vars['safetynumber'])
    MaxRequest = int(Vars['maxrequest'])
    MinRequest = int(Vars['minrequest'])
    BasedOn = str(Vars['basedon'])
    Demand = str(Vars['demand'])
    AntiProj = str(Vars['antiproj'])
    LoopAmount = str(Vars['loopamount'])
    RolimonsAuthCookie = str(Vars['rolimonsauthcookie'])
    Webhook = str(Vars['webhook'])
    #----------------------------------------------------------------------#

except:
    while True:
        print(bcolors.FAIL + "There Is An Error With The Config Please Make Sure It Is Formated Correctly Or Make Sure It Exists Within The Directory." + bcolors.ENDC)
        Accept_Decline = input(bcolors.FAIL + "Auto Install Missing Files? (y/n):" + bcolors.ENDC)

        if Accept_Decline == "y":
            with open('Config.ini', 'w') as f:
                ConfigFile = """[Variables]
[Variables]
PlayerId = 0
SafeMode = False
SafetyNumber = 0
MaxRequest = 0
MinRequest = 0
BasedOn = Rap
Demand = False, 0, 4
AntiProj = False
LoopAmount = infinite
Webhook = 
RolimonsAuthCookie = YourRolimonsCookieHere
"""
                f.write(ConfigFile)
                f.close()
                time.sleep(5)
                Loading = True
                while Loading == True:
                    try:
                        config = configparser.RawConfigParser()
                        config.sections()
                        Read = config.read('Config.ini')
                        print(Read)
                        Loading = False
                    except:
                        pass

                print(bcolors.OKBLUE + "Config File Has Been Created Please Go Edit It To Your Preferd Settings! Restart The Bot When Finished." + bcolors.ENDC)
                for i in range(31):
                    time.sleep(1)
                    sys.stdout.write(bcolors.WARNING + f"\rQuiting In {30 - i} Seconds." + bcolors.ENDC)
                    sys.stdout.flush()
                quit()

        elif Accept_Decline == "n":
            print(bcolors.WARNING + "Warning! You Have Decided Not To Create Missing Files, You Will Be Unable To Use This Bot Futher." + bcolors.ENDC)
            for i in range(11):
                time.sleep(1)
                sys.stdout.write(bcolors.WARNING + f"\rQuiting In {10 - i} Seconds." + bcolors.ENDC)
                sys.stdout.flush()
            quit()

        time.sleep(2.5)

Demand = Demand.replace(',', '').split()

ACSII = """
   ____                        _                        
  / ___|  _ __   _   _   ___  ( )  ___                  
 | |     | '__| | | | | / __| |/  / __|                 
 | |___  | |    | |_| | \__ \     \__ \                 
  \____| |_|     \__,_| |___/     |___/                 

     _              _               ____            _   
    / \     _   _  | |_    ___     | __ )    ___   | |_ 
   / _ \   | | | | | __|  / _ \    |  _ \   / _ \  | __|
  / ___ \  | |_| | | |_  | (_) |   | |_) | | (_) | | |_ 
 /_/   \_\  \__,_|  \__|  \___/    |____/   \___/   \__|

"""

print(bcolors.OKGREEN + f"{ACSII}" + bcolors.ENDC)




if LoopAmount.isnumeric():
    LoopAmount = int(LoopAmount)
else:
    LoopAmount = 1000000000 #Not Infinite But I Bet Your Ass You Aint Running This For 28538 Years

def LoopMain():
    for Amount in range(0, LoopAmount, 1):
        try:
            url = f"https://www.rolimons.com/player/{PlayerId}"
            r = requests.get(url)
            Test = r.text
            InfoR = re.search('ar scanned_player_assets = (.*);', Test)
            Info = str(InfoR.group(1))
            KeyRemoved = re.findall(r'"(.+?)"', Info)
        except:
            while True:
                print(bcolors.WARNING + "Something Went Wrong Please Check The Player Id Or Wait A Few Minutes." + bcolors.ENDC)
                time.sleep(2.5)

        ItemUrlAct = "https://www.rolimons.com/itemapi/itemdetails"
        ItemUrl = requests.get(ItemUrlAct).json()

        if SafeMode == "True":
            try:
                if len(KeyRemoved) >= SafetyNumber:
                    while True:
                        print(bcolors.WARNING + "You Are Unable To Do This Please Change Your Safety Number. (This Is To Prevent Timing Out)" + bcolors.ENDC)
                        time.sleep(2.5)

            except:
                pass

            else:
                print(bcolors.BOLD + "Safty Mode Off! \n" + bcolors.ENDC)

        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(bcolors.OKBLUE + "This Has Looped", Amount, "Times! (" + current_time + ")" + bcolors.ENDC)

        ListLims = []
        AdUpdate = []

        for key in ItemUrl['items'].keys():
            try:
                if AntiProj == "True" and str(ItemUrl['items'][key][7]) == "-1":
                    if Demand[0] == "False":
                        if BasedOn == "Rap":
                            if ItemUrl['items'][key][2] in range(MinRequest, MaxRequest + 1):
                                ListLims.append(key)

                        elif BasedOn == "Value":
                            if ItemUrl['items'][key][3] in range(MinRequest, MaxRequest + 1):
                                ListLims.append(key)

                    elif Demand[0] == "True":
                        if BasedOn == "Rap":
                            if ItemUrl['items'][key][2] in range(MinRequest, MaxRequest + 1) and ItemUrl['items'][key][5] in range(int(Demand[1]), int(Demand[2])):
                                ListLims.append(key)
                        elif BasedOn == "Value":
                            if ItemUrl['items'][key][3] in range(MinRequest, MaxRequest + 1) and ItemUrl['items'][key][5] in range(int(Demand[1]), int(Demand[2])):
                                ListLims.append(key)

                elif AntiProj == "False":
                    if Demand[0] == "False":
                        if BasedOn == "Rap":
                            if ItemUrl['items'][key][2] in range(MinRequest, MaxRequest + 1):
                                ListLims.append(key)

                        elif BasedOn == "Value":
                            if ItemUrl['items'][key][3] in range(MinRequest, MaxRequest + 1):
                                ListLims.append(key)

                    elif Demand[0] == "True":
                        if BasedOn == "Rap":
                            if ItemUrl['items'][key][2] in range(MinRequest, MaxRequest + 1) and ItemUrl['items'][key][5] in range(int(Demand[1]), int(Demand[2])):
                                ListLims.append(key)
                        elif BasedOn == "Value":
                            if ItemUrl['items'][key][3] in range(MinRequest, MaxRequest + 1) and ItemUrl['items'][key][5] in range(int(Demand[1]), int(Demand[2])):
                                ListLims.append(key)


            except:
                pass

        PriceList = []
        for x in range(0, 4, 1):
            try:
                Random = random.choice(ListLims)
                AdUpdate.append(int(Random))

                if ItemUrl['items'][Random][3] != -1:
                    PriceList.append(int(ItemUrl['items'][Random][3]))
                else:
                    PriceList.append(int(ItemUrl['items'][Random][2]))

            except:
                pass



        print(bcolors.OKBLUE + f"{AdUpdate}, Bots Random Picks." + bcolors.ENDC)


        # Get Item Rap
        class RPI:
            def getlimitedsCatalog(format=None):
                total = []
                itemdetails = requests.get("https://www.rolimons.com/itemapi/itemdetails")
                if format == 'id' or format == None:
                    for itemobj in itemdetails.json()['items']:
                        total.append(itemobj)
                    return total
                elif format == 'name':
                    for itemobj in itemdetails.json()['items']:
                        total.append(itemdetails.json()['items'][str(itemobj)][0])
                    return total

            def getValue(item, proxy=None):
                itemdetails = requests.get("https://www.rolimons.com/itemapi/itemdetails")
                itemcheck = itemdetails.json()['items'][str(item)][3]

                if str(itemcheck) != "-1":
                    return itemdetails.json()['items'][str(item)][3]
                else:
                    return itemdetails.json()['items'][str(item)][2]

            def idtoName(item):
                return requests.get("https://www.rolimons.com/itemapi/itemdetails").json()['items'][str(item)][0]

            def getitemAttributes(items):
                if not isinstance(items, list):
                    demandcheck = {-1: None, 0: 'terrible', 1: 'low', 2: 'normal', 3: 'high', 4: 'amazing'}
                    trends = {-1: None, 0: 'lowering', 1: 'unstable', 2: 'stable', 3: 'raising', 4: 'fluctuating'}
                    boolcheck = {-1: False, 1: True}
                    rtn = {}
                    itemdetails = requests.get("https://www.rolimons.com/itemapi/itemdetails")

                    if str(itemdetails.json()['items'][str(items)][3]) == '-1':
                        val = None
                    else:
                        val = itemdetails.json()['items'][str(items)][3]
                    if str(itemdetails.json()['items'][str(items)][4]) == '-1':
                        defaultval = None
                    else:
                        defaultval = itemdetails.json()['items'][str(items)][4]
                    if int(itemdetails.json()['items'][str(items)][6]) == 4:
                        trend = 'fluctuating'
                    rtn[items] = {'name': itemdetails.json()['items'][str(items)][0],
                                    'acronym': itemdetails.json()['items'][str(items)][1],
                                    'rap': itemdetails.json()['items'][str(items)][2], 'value': val,
                                    'default_value': defaultval,
                                    'demand': demandcheck[itemdetails.json()['items'][str(items)][5]],
                                    'trend': trends[itemdetails.json()['items'][str(items)][6]],
                                    'projected': boolcheck[itemdetails.json()['items'][str(items)][7]],
                                    'hyped': boolcheck[itemdetails.json()['items'][str(items)][8]],
                                    'rare': boolcheck[itemdetails.json()['items'][str(items)][9]]}
                    return rtn[items]
                elif isinstance(items, list):
                    demandcheck = {-1: None, 0: 'terrible', 1: 'low', 2: 'normal', 3: 'high', 4: 'amazing'}
                    trends = {-1: None, 0: 'lowering', 1: 'unstable', 2: 'stable', 3: 'raising', 4: 'fluctuating'}
                    boolcheck = {-1: False, 1: True}
                    rtn = {}

                    itemdetails = requests.get("https://www.rolimons.com/itemapi/itemdetails")
                    for itemcheck in items:
                        if str(itemdetails.json()['items'][str(itemcheck)][3]) == '-1':
                            val = None
                        else:
                            val = itemdetails.json()['items'][str(itemcheck)][3]
                        if str(itemdetails.json()['items'][str(itemcheck)][4]) == '-1':
                            defaultval = None
                        else:
                            defaultval = itemdetails.json()['items'][str(itemcheck)][4]
                        rtn[itemcheck] = {'name': itemdetails.json()['items'][str(itemcheck)][0],
                                            'acronym': itemdetails.json()['items'][str(itemcheck)][1],
                                            'rap': itemdetails.json()['items'][str(itemcheck)][2], 'value': val,
                                            'default_value': defaultval,
                                            'demand': demandcheck[itemdetails.json()['items'][str(itemcheck)][5]],
                                            'trend': trends[itemdetails.json()['items'][str(itemcheck)][6]],
                                            'projected': boolcheck[itemdetails.json()['items'][str(itemcheck)][7]],
                                            'hyped': boolcheck[itemdetails.json()['items'][str(itemcheck)][8]],
                                            'rare': boolcheck[itemdetails.json()['items'][str(itemcheck)][9]]}
                    return rtn

            def getcatalogCount(self):
                return requests.get('https://www.rolimons.com/itemapi/itemdetails').json()['item_count']

        NewList = []
        RapList = []

        for _z in range(0, len(KeyRemoved), 1):
            try:
                details = RPI.getitemAttributes(KeyRemoved[_z])
                Rap = details['rap']
                NewList.append(int(Rap + int(_z)))
                RapList.append(int(Rap))
            except:
                pass

        NewList.sort()
        NewList.reverse()
        RapList.sort()
        RapList.reverse()

        PriceListMine = []
        Ids = []
        for v in range(0, len(KeyRemoved), 1):
            if v <= 3:
                try:
                    Number = NewList[v] - RapList[v]
                    Ids.append(int(KeyRemoved[Number]))


                except:
                    pass

        try:
            Price = PriceList[0] + PriceList[1] + PriceList[2] + PriceList[3]

            for x in range(0, len(Ids), 1):
                try:
                    if ItemUrl['items'][str(Ids[x])][3] != -1:
                        PriceListMine.append(int(ItemUrl['items'][str(Ids[x])][3]))
                    else:
                        PriceListMine.append(int(ItemUrl['items'][str(Ids[x])][2]))
                except:
                    pass
        except:
            pass

        Sum = sum(PriceListMine)
        DividedNum = Price/Sum

        if DividedNum <5:
            print(bcolors.OKBLUE + f"{Ids}, Your Items." + bcolors.ENDC)
            payload1 = {"player_id": PlayerId, "offer_item_ids": Ids, "request_item_ids": AdUpdate, "request_tags": []}

            url = "https://www.rolimons.com/tradeapi/create"

            headers1 = {
                "cookie": RolimonsAuthCookie,
                "authority": "www.rolimons.com",
                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36 OPR/82.0.4227.50",
                "origin": "https://www.rolimons.com",
                "referer": "https://www.rolimons.com/tradeadcreate",
                "sec-ch-ua-platform": "Windows",
                "method": "POST"
            }

            r = requests.post(url, headers=headers1, json=payload1)

            print(bcolors.OKCYAN + f"{r.json()}" + bcolors.ENDC)

            try:
                Success = str(r.json()['success'])
                if Success == "True":
                    data = {
                        "content": f"Created Trade Ad! - {Amount} - \n",
                        "username": str(PlayerId)
                    }

                    result = requests.post(Webhook, json=data)

                elif Success != "True":
                    data = {
                        "content": f"Failed To Created Ad. This Could Be Due To A Config Error! \n",
                        "username": str(PlayerId)
                    }

                    result = requests.post(Webhook, json=data)
            except:
                pass

            for i in range(906):
                time.sleep(1)
                sys.stdout.write(bcolors.OKGREEN + f"\r{905 - i} Seconds Till Rerun!" + bcolors.ENDC)
                sys.stdout.flush()

            print("\n \n")

        else:
            print(bcolors.FAIL + f"Value Over 5x! If This Continues To Happen Please Change Your Config! ({round(DividedNum)}x Offer Amount)" + bcolors.ENDC)
            for i in range(16):
                time.sleep(1)
                sys.stdout.write(bcolors.FAIL + f"\r{15 - i} Seconds Until Rerun." + bcolors.ENDC)
                sys.stdout.flush()

            print("\n")




t2 = Thread(target=LoopMain)
t2.start()




